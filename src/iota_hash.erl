% Copyright (c) 2017 Solarbit.cc <steve@solarbit.cc>
% See LICENCE

-module(iota_hash).
-include("iota.hrl").
-export([generate_seed/0, curl/1, kerl/1]).

-compile(export_all).

-define(TRYTE_HASHLENGTH, 81).

-define(TRIT_HASHLENGTH, (?TRYTE_HASHLENGTH * 3)).
-define(STATE_LENGTH, (?TRIT_HASHLENGTH * 3)).

-define(CURL_INITIAL_STATE, lists:duplicate(?STATE_LENGTH, 0)).
-define(CURL_PAD, lists:duplicate(?TRIT_HASHLENGTH * 2, 0)).
-define(CURL_ROUNDS, 27).
-define(CURL_TRUTH_TABLE, {1, 0, -1, 1, -1, 0, -1, 1, 0}).

-define(KERL_MASK, binary:copy(<<255>>, 48)).
-define(KECCAK_HASHSIZE, 384).


generate_seed() ->
	Bin = crypto:strong_rand_bytes(?TRYTE_HASHLENGTH),
	Bin0 = << <<(X rem 27)>> || <<X>> <= Bin>>,
	trinary:from_binary(Bin0).


curl(Trytes) ->
	curl(Trytes, 1).

curl(Trytes, Count) ->
	State = curl_absorb(Trytes),
	curl_squeeze(State, Count).


curl_absorb(Trytes) ->
	curl_absorb(Trytes, ?CURL_INITIAL_STATE).

curl_absorb(<<Trytes:?TRYTE_HASHLENGTH/binary, Bin/binary>>, State) ->
	Trits = lists:reverse(trinary:to_trits(Trytes)),
	{_, Rest} = lists:split(?TRIT_HASHLENGTH, State),
	State0 = curl_transform(Trits ++ Rest),
	curl_absorb(Bin, State0);
curl_absorb(<<>>, State) ->
	State.


curl_squeeze(State, Count) ->
	curl_squeeze(State, Count, <<>>).

curl_squeeze(State, Count, Acc) when Count > 0 ->
	{Hash, _} = lists:split(?TRIT_HASHLENGTH, State),
	Trytes = trinary:from_trits(lists:reverse(Hash)),
	State0 = curl_transform(State),
	curl_squeeze(State0, Count - 1, <<Acc/binary, Trytes/binary>>);
curl_squeeze(_, 0, Acc) ->
	Acc.


curl_transform(State) ->
	curl_transform(State, 1).

curl_transform(State, Round) when Round =< ?CURL_ROUNDS ->
	State0 = curl_transform(State, 1, 1, []),
	curl_transform(State0, Round + 1);
curl_transform(State, _) ->
	State.

curl_transform(State, Index, Count, Acc) when Count =< ?STATE_LENGTH ->
	Index0 = curl_next_index(Index),
	X = lists:nth(Index, State) + lists:nth(Index0, State) * 3 + 5,
	Value = element(X, ?CURL_TRUTH_TABLE),
	curl_transform(State, Index0, Count + 1, [Value|Acc]);
curl_transform(_, _, _, Acc) ->
	lists:reverse(Acc).


curl_next_index(X) when X =< 365 ->
	X + 364;
curl_next_index(X) ->
	X - 365.


kerl(Trytes) ->
	kerl(Trytes, 1).

kerl(Trytes, HashCount) ->
	Hash = kerl_absorb(Trytes),
	kerl_squeeze(Hash, HashCount).


kerl_absorb(Trytes) ->
	kerl_absorb(Trytes, sha3:hash_init(?KECCAK_HASHSIZE)).

kerl_absorb(<<Trytes:?TRYTE_HASHLENGTH/binary, Bin/binary>>, State) ->
	% NOTE: Seems odd to have to set the high trit to zero?
	[_|Trits] = trinary:to_trits(Trytes),
	X = ternary:to_integer([0|Trits]),
	State0 = sha3:hash_update(State, <<X:?KECCAK_HASHSIZE>>),
	kerl_absorb(Bin, State0);
kerl_absorb(<<>>, State) ->
	sha3:hash_final(State).


kerl_squeeze(Hash, Count) ->
	kerl_squeeze(Hash, Count, <<>>).

kerl_squeeze(Hash, Count, Acc) when Count > 0 ->
	<<X:?KECCAK_HASHSIZE/signed>> = Hash,
	Trytes = trinary:from_integer(X),
	Hash0 = sha3:hash(?KECCAK_HASHSIZE, crypto:exor(Hash, ?KERL_MASK)),
	kerl_squeeze(Hash0, Count - 1, <<Acc/binary, Trytes/binary>>);
kerl_squeeze(_, 0, Acc) ->
	Acc.


-define(TEST, true).
-ifdef(TEST).

test() ->
	test_sha3_implementation(),
	test_kerl_one_absorb(),
	test_kerl_multisqueeze(),
	test_kerl_multiabsorb_multisqueeze(),
	test_curl(),
	ok.

test_curl() ->
    Trytes = <<"RSWWSFXPQJUBJROQBRQZWZXZJWMUBVIVMHPPTYSNW9YQIQQF9RCSJJCVZG9ZWITXNCSBBDHEEKDRBHVTWCZ9SZOOZHVB",
		"PCQNPKTWFNZAWGCZ9QDIMKRVINMIRZBPKRKQAIPGOHBTHTGYXTBJLSURDSPEOJ9UKJECUKCCPVIQQHDUYKVKISCEIEGVOQWR",
		"BAYXWGSJUTEVG9RPQLPTKYCRAJ9YNCUMDVDYDQCKRJOAPXCSUDAJGETALJINHEVNAARIPONBWXUOQUFGNOCUSSLYWKOZMZUK",
		"LNITZIFXFWQAYVJCVMDTRSHORGNSTKX9Z9DLWNHZSMNOYTU9AUCGYBVIITEPEKIXBCOFCMQPBGXYJKSHPXNUKFTXIJVYRFILA",
		"VXEWTUICZCYYPCEHNTK9SLGVL9RLAMYTAEPONCBHDXSEQZOXO9XCFUCPPMKEBR9IEJGQOPPILHFXHMIULJYXZJASQEGCQDVYFO",
		"M9ETXAGVMSCHHQLFPATWOSMZIDL9AHMSDCE9UENACG9OVFAEIPPQYBCLXDMXXA9UBJFQQBCYKETPNKHNOUKCSSYLWZDLKUARXN",
		"VKKKHNRBVSTVKQCZL9RY9BDTDTPUTFUBGRMSTOTXLWUHDMSGYRDSZLIPGQXIDMNCNBOAOI9WFUCXSRLJFIVTIPIAZUK9EDUJJ9",
		"B9YCJEZQQELLHVCWDNRH9FUXDGZRGOVXGOKORTCQQA9JXNROLETYCNLRMBGXBL9DQKMOAZCBJGWLNJLGRSTYBKLGFVRUF9QOPZV",
		"QFGMDJA9TBVGFJDBAHEVOLW9GNU9NICLCQJBOAJBAHHBZJGOFUCQMBGYQLCWNKSZPPBQMSJTJLM9GXOZHTNDLGIRCSIJAZTENQVQ",
		"DHFSOQM9WVNWQQJNOPZMEISSCLOADMRNWALBBSLSWNCTOSNHNLWZBVCFIOGFPCPRKQSRGKFXGTWUSCPZSKQNLQJGKDLOXSBJMEHQPD",
		"ZGSENUKWAHRNONDTBLHNAKGLOMCFYRCGMDOVANPFHMQRFCZIQHCGVORJJNYMTORDKPJPLA9LWAKAWXLIFEVLKHRKCDG9QPQCPGVKI",
		"VBENQJTJGZKFTNZHIMQISVBNLHAYSSVJKTIELGTETKPVRQXNAPWOBGQGFRMMK9UQDWJHSQMYQQTCBMVQKUVGJEAGTEQDN9TCRRAZHD",
		"PSPIYVNKPGJSJZASZQBM9WXEDWGAOQPPZFLAMZLEZGXPYSOJRWL9ZH9NOJTUKXNTCRRDO9GKULXBAVDRIZBOKJYVJUSHIX9F9O9ACYC",
		"AHUKBIEPVZWVJAJGSDQNZNWLIWVSKFJUMOYDMVUFLUXT9CEQEVRFBJVPCTJQCORM9JHLYFSMUVMFDXZFNCUFZZIKREIUIHUSHRPP",
		"OUKGFKWX9COXBAZMQBBFRFIBGEAVKBWKNTBMLPHLOUYOXPIQIZQWGOVUWQABTJT9ZZPNBABQFYRCQLXDHDEX9PULVTCQLWPTJLRS",
		"VZQEEYVBVY9KCNEZXQLEGADSTJBYOXEVGVTUFKNCNWMEDKDUMTKCMRPGKDCCBDHDVVSMPOPUBZOMZTXJSQNVVGXNPPBVSBL9WWXWQ",
		"NMHRMQFEQYKWNCSW9URI9FYPT9UZMAFMMGUKFYTWPCQKVJ9DIHRJFMXRZUGI9TMTFUQHGXNBITDSORZORQIAMKY9VRYKLEHNRNFSEF",
		"BHF9KXIQAEZEJNQOENJVMWLMHI9GNZPXYUIFAJIVCLAGKUZIKTJKGNQVTXJORWIQDHUPBBPPYOUPFAABBVMMYATXERQHPECDVYGWDGX",
		"FJKOMOBXKRZD9MCQ9LGDGGGMYGUAFGMQTUHZOAPLKPNPCIKUNEMQIZOCM9COAOMZSJ9GVWZBZYXMCNALENZ9PRYMHENPWGKX9ULUIGJU",
		"JRKFJPBTTHCRZQKEAHT9DC9GSWQEGDTZFHACZMLFYDVOWZADBNMEM9XXEOMHCNJMDSUAJRQTBUWKJF9RZHK9ACGUNI9URFIHLXBXCEO",
		"DONPXBSCWP9WNAEYNALKQHGULUQGAFL9LB9NBLLCACLQFGQMXRHGBTMI9YKAJKVELRWWKJAPKMSYMJTDYMZ9PJEEYIRXRMMFLRSFSHIX",
		"UL9NEJABLRUGHJFL9RASMSKOI9VCFRZ9GWTMODUUESIJBHWWHZYCLDENBFSJQPIOYC9MBGOOXSWEMLVU9L9WJXKZKVDBDMFSVHHISSSNI",
		"LUMWULMVMESQUIHDGBDXROXGH9MTNFSLWJZRAPOKKRGXAAQBFPYPAAXLSTMNSNDTTJQSDQORNJS9BBGQ9KQJZYPAQ9JYQZJ9B9KQDAXUA",
		"CZWRUNGMBOQLQZUHFNCKVQGORRZGAHES9PWJUKZWUJSBMNZFILBNBQQKLXITCTQDDBV9UDAOQOUPWMXTXWFWVMCXIXLRMRWMAYYQJPCEA",
		"AOFEOGZQMEDAGYGCTKUJBS9AGEXJAFHWWDZRYEN9DN9HVCMLFURISLYSWKXHJKXMHUWZXUQARMYPGKRKQMHVR9JEYXJRPNZINYNCGZHHU",
		"NHBAIJHLYZIZGGIDFWVNXZQADLEDJFTIUTQWCQSX9QNGUZXGXJYUUTFSZPQKXBA9DFRQRLTLUJENKESDGTZRGRSLTNYTITXRXRGVLWBTEWP",
		"JXZYLGHLQBAVYVOSABIVTQYQM9FIQKCBRRUEMVVTMERLWOK">>,
    Expected = <<"KXRVLFETGUTUWBCNCC9DWO99JQTEI9YXVOZHWELSYP9SG9KN9WCKXOVTEFHFH9EFZJKFYCZKQPPBXYSGJ">>,
	Output = curl(Trytes),
	?TTY({test_curl, Output == Expected, Expected, Output}).


test_sha3_implementation() ->
	Expected = <<"0c8d6ff6e6a1cf18a0d55b20f0bca160d0d1c914a5e842f3707a25eeb20a279f6b4e83eda8e43a67697832c7f69f53ca">>,
	Hash = sha3:hash(?KECCAK_HASHSIZE, <<"Message">>),
	?TTY({test_sha3_implementation, Hash == hex:decode(Expected), Expected, hex:encode(Hash)}).

test_kerl_one_absorb() ->
	Input = <<"EMIDYNHBWMBCXVDEFOFWINXTERALUKYYPPHKP9JJFGJEIUY9MUDVNFZHMMWZUYUSWAIOWEVTHNWMHANBH">>,
	Expected = <<"EJEAOOZYSAWFPZQESYDHZCGYNSTWXUMVJOVDWUNZJXDGWCLUFGIMZRMGCAZGKNPLBRLGUNYWKLJTYEAQX">>,
	Output = kerl(Input),
	?TTY({test_kerl_one_absorb, Output == Expected, Input, Expected, Output}).

test_kerl_multisqueeze() ->
	Input = <<"9MIDYNHBWMBCXVDEFOFWINXTERALUKYYPPHKP9JJFGJEIUY9MUDVNFZHMMWZUYUSWAIOWEVTHNWMHANBH">>,
	Expected = <<"G9JYBOMPUXHYHKSNRNMMSSZCSHOFYOYNZRSZMAAYWDYEIMVVOGKPJBVBM9TDPULSFUNMTVXRKFIDOHUXX",
			"VYDLFSZYZTWQYTE9SPYYWYTXJYQ9IFGYOLZXWZBKWZN9QOOTBQMWMUBLEWUEEASRHRTNIQWJQNDWRYLCA">>,
	Output = kerl(Input, 2),
	?TTY({test_kerl_multisqueeze, Output == Expected, Input, Expected, Output}).

test_kerl_multiabsorb_multisqueeze() ->
	Input = <<"G9JYBOMPUXHYHKSNRNMMSSZCSHOFYOYNZRSZMAAYWDYEIMVVOGKPJBVBM9TDPULSFUNMTVXRKFIDOHUXX",
			"VYDLFSZYZTWQYTE9SPYYWYTXJYQ9IFGYOLZXWZBKWZN9QOOTBQMWMUBLEWUEEASRHRTNIQWJQNDWRYLCA">>,
	Expected = <<"LUCKQVACOGBFYSPPVSSOXJEKNSQQRQKPZC9NXFSMQNRQCGGUL9OHVVKBDSKEQEBKXRNUJSRXYVHJTXBPDW",
			"QGNSCDCBAIRHAQCOWZEBSNHIJIGPZQITIBJQ9LNTDIBTCQ9EUWKHFLGFUVGGUWJONK9GBCDUIMAYMMQX">>,
	Output = kerl(Input, 2),
	?TTY({test_kerl_multiabsorb_multisqueeze, Output == Expected, Input, Expected, Output}).


-endif.
