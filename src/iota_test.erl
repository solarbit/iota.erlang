% Copyright (c) 2017 Solarbit.cc <steve@solarbit.cc>
% See LICENCE

-module(iota_test).

-include("iota.hrl").

-export([run/0]).

run() ->
	test_ternary(),
	test_trinary(),
	test_curl(),
	test_sha3_implementation(),
	test_kerl_one_absorb(),
	test_kerl_multisqueeze(),
	test_kerl_multiabsorb_multisqueeze(),
	ok.

test_ternary() ->
	?TTY(ternary),
	<<X:256>> = crypto:strong_rand_bytes(32),
	<<Y:256>> = crypto:strong_rand_bytes(32),
	?TTY({X, Y}),
	XT = ternary:from_integer(X),
	YT = ternary:from_integer(Y),
	?TTY({XT, YT}),
	X0 = ternary:to_integer(XT),
	?TTY({X == X0, X0}),
	Y0 = ternary:to_integer(YT),
	?TTY({Y == Y0, Y0}),
	NT = ternary:negate(XT),
	?TTY({negate, NT}),
	N = ternary:to_integer(NT),
	?TTY({N == -X, N, -X}),
	AT = ternary:add(XT, YT),
	?TTY({add, AT}),
	A = ternary:to_integer(AT),
	?TTY({A == X + Y, A, X + Y}),
	ST = ternary:subtract(XT, YT),
	?TTY({subtract, ST}),
	S = ternary:to_integer(ST),
	?TTY({S == X - Y, S, X - Y}),
	XBCH = ternary:to_binary(XT),
	XT0 = ternary:from_binary(XBCH),
	?TTY({XT == XT0, XBCH}),
	YBCH = ternary:to_binary(YT),
	YT0 = ternary:from_binary(YBCH),
	?TTY({YT == YT0, YBCH}).


test_trinary() ->
	?TTY(trinary),
	<<X:256>> = crypto:strong_rand_bytes(32),
	<<Y:256>> = crypto:strong_rand_bytes(32),
	?TTY({X, Y}),
	XT = trinary:from_integer(X),
	YT = trinary:from_integer(Y),
	?TTY({XT, YT}),
	X0 = trinary:to_integer(XT),
	?TTY({integer, X == X0, X0}),
	XB = trinary:to_binary(XT),
	XT0 = trinary:from_binary(XB),
	?TTY({binary, XT == XT0, XB}),
	M = <<"IOTA is a distributed ledger for the Internet of Things.\nhttp://iota.org">>,
	MT = trinary:from_text(M),
	M0 = trinary:to_text(MT),
	?TTY({text, M == M0, M0, MT}),
	MTT = trinary:to_trits(MT),
	MT0 = trinary:from_trits(MTT),
	?TTY({trits, MT0 == MT, MTT, MT0}).


test_curl() ->
    Trytes = <<"RSWWSFXPQJUBJROQBRQZWZXZJWMUBVIVMHPPTYSNW9YQIQQF9RCSJJCVZG9ZWITXNCSBBDHEEKDRBHVTWCZ9SZOOZHVB",
		"PCQNPKTWFNZAWGCZ9QDIMKRVINMIRZBPKRKQAIPGOHBTHTGYXTBJLSURDSPEOJ9UKJECUKCCPVIQQHDUYKVKISCEIEGVOQWR",
		"BAYXWGSJUTEVG9RPQLPTKYCRAJ9YNCUMDVDYDQCKRJOAPXCSUDAJGETALJINHEVNAARIPONBWXUOQUFGNOCUSSLYWKOZMZUK",
		"LNITZIFXFWQAYVJCVMDTRSHORGNSTKX9Z9DLWNHZSMNOYTU9AUCGYBVIITEPEKIXBCOFCMQPBGXYJKSHPXNUKFTXIJVYRFILA",
		"VXEWTUICZCYYPCEHNTK9SLGVL9RLAMYTAEPONCBHDXSEQZOXO9XCFUCPPMKEBR9IEJGQOPPILHFXHMIULJYXZJASQEGCQDVYFO",
		"M9ETXAGVMSCHHQLFPATWOSMZIDL9AHMSDCE9UENACG9OVFAEIPPQYBCLXDMXXA9UBJFQQBCYKETPNKHNOUKCSSYLWZDLKUARXN",
		"VKKKHNRBVSTVKQCZL9RY9BDTDTPUTFUBGRMSTOTXLWUHDMSGYRDSZLIPGQXIDMNCNBOAOI9WFUCXSRLJFIVTIPIAZUK9EDUJJ9",
		"B9YCJEZQQELLHVCWDNRH9FUXDGZRGOVXGOKORTCQQA9JXNROLETYCNLRMBGXBL9DQKMOAZCBJGWLNJLGRSTYBKLGFVRUF9QOPZV",
		"QFGMDJA9TBVGFJDBAHEVOLW9GNU9NICLCQJBOAJBAHHBZJGOFUCQMBGYQLCWNKSZPPBQMSJTJLM9GXOZHTNDLGIRCSIJAZTENQVQ",
		"DHFSOQM9WVNWQQJNOPZMEISSCLOADMRNWALBBSLSWNCTOSNHNLWZBVCFIOGFPCPRKQSRGKFXGTWUSCPZSKQNLQJGKDLOXSBJMEHQPD",
		"ZGSENUKWAHRNONDTBLHNAKGLOMCFYRCGMDOVANPFHMQRFCZIQHCGVORJJNYMTORDKPJPLA9LWAKAWXLIFEVLKHRKCDG9QPQCPGVKI",
		"VBENQJTJGZKFTNZHIMQISVBNLHAYSSVJKTIELGTETKPVRQXNAPWOBGQGFRMMK9UQDWJHSQMYQQTCBMVQKUVGJEAGTEQDN9TCRRAZHD",
		"PSPIYVNKPGJSJZASZQBM9WXEDWGAOQPPZFLAMZLEZGXPYSOJRWL9ZH9NOJTUKXNTCRRDO9GKULXBAVDRIZBOKJYVJUSHIX9F9O9ACYC",
		"AHUKBIEPVZWVJAJGSDQNZNWLIWVSKFJUMOYDMVUFLUXT9CEQEVRFBJVPCTJQCORM9JHLYFSMUVMFDXZFNCUFZZIKREIUIHUSHRPP",
		"OUKGFKWX9COXBAZMQBBFRFIBGEAVKBWKNTBMLPHLOUYOXPIQIZQWGOVUWQABTJT9ZZPNBABQFYRCQLXDHDEX9PULVTCQLWPTJLRS",
		"VZQEEYVBVY9KCNEZXQLEGADSTJBYOXEVGVTUFKNCNWMEDKDUMTKCMRPGKDCCBDHDVVSMPOPUBZOMZTXJSQNVVGXNPPBVSBL9WWXWQ",
		"NMHRMQFEQYKWNCSW9URI9FYPT9UZMAFMMGUKFYTWPCQKVJ9DIHRJFMXRZUGI9TMTFUQHGXNBITDSORZORQIAMKY9VRYKLEHNRNFSEF",
		"BHF9KXIQAEZEJNQOENJVMWLMHI9GNZPXYUIFAJIVCLAGKUZIKTJKGNQVTXJORWIQDHUPBBPPYOUPFAABBVMMYATXERQHPECDVYGWDGX",
		"FJKOMOBXKRZD9MCQ9LGDGGGMYGUAFGMQTUHZOAPLKPNPCIKUNEMQIZOCM9COAOMZSJ9GVWZBZYXMCNALENZ9PRYMHENPWGKX9ULUIGJU",
		"JRKFJPBTTHCRZQKEAHT9DC9GSWQEGDTZFHACZMLFYDVOWZADBNMEM9XXEOMHCNJMDSUAJRQTBUWKJF9RZHK9ACGUNI9URFIHLXBXCEO",
		"DONPXBSCWP9WNAEYNALKQHGULUQGAFL9LB9NBLLCACLQFGQMXRHGBTMI9YKAJKVELRWWKJAPKMSYMJTDYMZ9PJEEYIRXRMMFLRSFSHIX",
		"UL9NEJABLRUGHJFL9RASMSKOI9VCFRZ9GWTMODUUESIJBHWWHZYCLDENBFSJQPIOYC9MBGOOXSWEMLVU9L9WJXKZKVDBDMFSVHHISSSNI",
		"LUMWULMVMESQUIHDGBDXROXGH9MTNFSLWJZRAPOKKRGXAAQBFPYPAAXLSTMNSNDTTJQSDQORNJS9BBGQ9KQJZYPAQ9JYQZJ9B9KQDAXUA",
		"CZWRUNGMBOQLQZUHFNCKVQGORRZGAHES9PWJUKZWUJSBMNZFILBNBQQKLXITCTQDDBV9UDAOQOUPWMXTXWFWVMCXIXLRMRWMAYYQJPCEA",
		"AOFEOGZQMEDAGYGCTKUJBS9AGEXJAFHWWDZRYEN9DN9HVCMLFURISLYSWKXHJKXMHUWZXUQARMYPGKRKQMHVR9JEYXJRPNZINYNCGZHHU",
		"NHBAIJHLYZIZGGIDFWVNXZQADLEDJFTIUTQWCQSX9QNGUZXGXJYUUTFSZPQKXBA9DFRQRLTLUJENKESDGTZRGRSLTNYTITXRXRGVLWBTEWP",
		"JXZYLGHLQBAVYVOSABIVTQYQM9FIQKCBRRUEMVVTMERLWOK">>,
    Expected = <<"KXRVLFETGUTUWBCNCC9DWO99JQTEI9YXVOZHWELSYP9SG9KN9WCKXOVTEFHFH9EFZJKFYCZKQPPBXYSGJ">>,
	Output = iota_hash:curl(Trytes),
	?TTY({test_curl, Output == Expected, Expected, Output}).


test_sha3_implementation() ->
	Expected = <<"0c8d6ff6e6a1cf18a0d55b20f0bca160d0d1c914a5e842f3707a25eeb20a279f6b4e83eda8e43a67697832c7f69f53ca">>,
	Hash = sha3:hash(384, <<"Message">>),
	?TTY({test_sha3_implementation, Hash == hex:decode(Expected), Expected, hex:encode(Hash)}).

test_kerl_one_absorb() ->
	Input = <<"EMIDYNHBWMBCXVDEFOFWINXTERALUKYYPPHKP9JJFGJEIUY9MUDVNFZHMMWZUYUSWAIOWEVTHNWMHANBH">>,
	Expected = <<"EJEAOOZYSAWFPZQESYDHZCGYNSTWXUMVJOVDWUNZJXDGWCLUFGIMZRMGCAZGKNPLBRLGUNYWKLJTYEAQX">>,
	Output = iota_hash:kerl(Input),
	?TTY({test_kerl_one_absorb, Output == Expected, Input, Expected, Output}).

test_kerl_multisqueeze() ->
	Input = <<"9MIDYNHBWMBCXVDEFOFWINXTERALUKYYPPHKP9JJFGJEIUY9MUDVNFZHMMWZUYUSWAIOWEVTHNWMHANBH">>,
	Expected = <<"G9JYBOMPUXHYHKSNRNMMSSZCSHOFYOYNZRSZMAAYWDYEIMVVOGKPJBVBM9TDPULSFUNMTVXRKFIDOHUXX",
			"VYDLFSZYZTWQYTE9SPYYWYTXJYQ9IFGYOLZXWZBKWZN9QOOTBQMWMUBLEWUEEASRHRTNIQWJQNDWRYLCA">>,
	Output = iota_hash:kerl(Input, 2),
	?TTY({test_kerl_multisqueeze, Output == Expected, Input, Expected, Output}).

test_kerl_multiabsorb_multisqueeze() ->
	Input = <<"G9JYBOMPUXHYHKSNRNMMSSZCSHOFYOYNZRSZMAAYWDYEIMVVOGKPJBVBM9TDPULSFUNMTVXRKFIDOHUXX",
			"VYDLFSZYZTWQYTE9SPYYWYTXJYQ9IFGYOLZXWZBKWZN9QOOTBQMWMUBLEWUEEASRHRTNIQWJQNDWRYLCA">>,
	Expected = <<"LUCKQVACOGBFYSPPVSSOXJEKNSQQRQKPZC9NXFSMQNRQCGGUL9OHVVKBDSKEQEBKXRNUJSRXYVHJTXBPDW",
			"QGNSCDCBAIRHAQCOWZEBSNHIJIGPZQITIBJQ9LNTDIBTCQ9EUWKHFLGFUVGGUWJONK9GBCDUIMAYMMQX">>,
	Output = iota_hash:kerl(Input, 2),
	?TTY({test_kerl_multiabsorb_multisqueeze, Output == Expected, Input, Expected, Output}).
